{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "haze",
  "patterns": [
    {
      "include": "#main-patterns"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.module",
          "match": "\\b(export|inject)\\b"
        },
        {
          "name": "keyword.control.as",
          "match": "\\bas\\b"
        },
        {
          "name": "keyword.control.type",
          "match": "\\btype \\b"
        },
        {
          "name": "keyword.control",
          "match": "\\b(extern|noemit|const|let|if|else|while|do|for|return|static|defer)\\b"
        },
        {
          "name": "keyword.operator.new",
          "match": "\\b(new|drop)\\b"
        },
        {
          "name": "keyword.struct",
          "match": "\\b(struct)\\b"
        },
        {
          "match": "\\b(is|not)\\b",
          "name": "keyword.operator.expression"
        },
        {
          "name": "keyword.other.union",
          "match": "\\b(union)\\b"
        },
        {
          "name": "keyword.other.namespace",
          "match": "\\bnamespace\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.haze",
          "match": "\\\\."
        }
      ]
    },
    "hints": {
      "patterns": [
        {
          "name": "keyword.control.module",
          "match": "#compile(?=\\s*\".*\")"
        },
        {
          "name": "keyword.control.module",
          "match": "import "
        },
        {
          "name": "keyword.control.module",
          "match": "from "
        },
        {
          "name": "keyword.control.module",
          "match": "#link(?=\\s*\".*\")"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "match": "//.*"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "begin": "(?x) (?:[a-zA-Z_][\\w]*\\.)? ([a-zA-Z_][\\w]*) \\s* (?=<|\\()",
          "end": "(?=[;\\n])",
          "beginCaptures": {
            "1": {
              "name": "meta.function-call"
            }
          },
          "patterns": [
            {
              "name": "meta.generic-args",
              "begin": "(?<=\\w)\\s*<",
              "end": ">",
              "beginCaptures": {
                "0": { "name": "punctuation.definition.generic.begin" }
              },
              "endCaptures": {
                "0": { "name": "punctuation.definition.generic.end" }
              },
              "patterns": [
                {
                  "match": "\\b[a-zA-Z_][\\w]*\\b",
                  "name": "entity.name.type.my-language"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma"
                },
                {
                  "include": "$self"
                }
              ]
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "beginCaptures": {
                "0": { "name": "punctuation.definition.parameters.begin" }
              },
              "endCaptures": {
                "0": { "name": "punctuation.definition.parameters.end" }
              },
              "patterns": [{ "include": "#main-patterns" }]
            }
          ]
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "name": "meta.struct.instantiation.my-language",
          "begin": "\\b([A-Z][\\w]*)\\s*{",
          "end": "}",
          "beginCaptures": {
            "1": { "name": "entity.name.type.my-language" },
            "0": { "name": "punctuation.definition.block.begin" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.block.end" }
          },
          "patterns": [
            {
              "name": "variable.other.property.my-language",
              "match": "\\b[a-z][\\w]*\\b(?=\\s*:)"
            },
            {
              "include": "#main-patterns"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.readwrite",
          "match": "\\blet\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "variable.other.readwrite",
          "match": "\\bconst\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "variable.other.member",
          "match": "\\.[a-zA-Z_][a-zA-Z_0-9]*\\s*:"
        },
        {
          "name": "variable.language.this",
          "match": "\\bthis\\b"
        },
        {
          "name": "entity.name.namespace",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\.\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*\\()"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b\\d+\\b"
        },
        { "match": "\\b(true)\\b", "name": "constant.language.boolean.true.ts" },
        { "match": "\\b(false)\\b", "name": "constant.language.boolean.false.ts" }
      ]
    },
    "datatypes": {
      "patterns": [
        {
          "name": "support.type.primitive",
          "match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|str|String|bool|int|real|complex)\\b"
        },
        {
          "name": "support.type.builtin",
          "match": "\\b(none|unknown)\\b"
        },
        {
          "name": "storage.type",
          "match": "(?<=\\bas\\s)[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "main-patterns": {
      "patterns": [
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#hints" },
        { "include": "#comments" },
        { "include": "#constants" },
        { "include": "#datatypes" },
        { "include": "#variables" },
        { "include": "#functions" },
        { "include": "#structs" }
      ]
    }
  },
  "scopeName": "source.hz",
  "REMEMBER_FOR_ME": ["keyword.operator.type.haze", "variable.parameter.ts"]
}
