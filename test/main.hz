
// window(): i32 { 
//   if not glfwInit() {
//     ctx.log.error("Initializing GLFW failed");
//     return 0;
//   }

//   const windowResult = Window(1080, 720, "Test 1");
//   if not windowResult.isSuccess {
//       printf("%s\n", windowResult.error);
//       glfwTerminate();
//       return 0;
//   }
//   const window = windowResult.success;

//   const v_phi_const = 50;
//   const R = 300;

//   const P = Vec2(0, 0);
//   const velocity = Vec2(0, 0);
//   const acceleration = Vec2(0, 0);

//   const oldTime = getTime();
//   const startTime = getTime();

//   const path = List<Vec2>();

//   while !window.shouldClose() {
//     beginFrame();
//     frame();

//     // text("Hallo cooler Test!", 60);
//     // div(() => {
//     //   text("Oh Yeah!", 18);
//     // });

//     window.pollEvents();
//     const now = getTime();
//     const dt = now - oldTime;
//     oldTime = now;
//     const elapsed = now - startTime;

//     const mouse = window.getCursorPos();

//     if window.getKey(32) {
//       P = Vec2(R, 0);
//       velocity = Vec2(0, v_phi_const);
//       acceleration = Vec2(0, 0);
//       startTime = getTime();
//       path.clear();
//     }

//     const origin = Vec2(200, 600);
//     const m = mouse.sub(origin);
//     m = Vec2(m.x, -m.y);
//     if window.getMouseButton(0) {
//       P = Vec2(m.x, m.y);
//       velocity = Vec2(0, v_phi_const);
//       acceleration = Vec2(0, 0);
//       startTime = getTime();
//       path.clear();
//     }

//     // =========================================

//     const phi = atan2(P.y, P.x);

//     const e_r = P.normalize();
//     const e_phi = Vec2(-e_r.y, e_r.x);

//     const v_phi = velocity.dot(e_phi);
//     const v_r = velocity.dot(e_r);

//     const a_phi = pow(v_phi, 2) / R * phi;
//     const a_r = pow(v_phi, 2) / R * 
//                 (
//                     cosh((2*v_phi*elapsed) / (sqrt(2) * R)) 
//                     - 
//                     1/pow(cosh((v_phi*elapsed)/(sqrt(2)*R)), 2));

//     acceleration = Vec2(a_r * cos(phi) - a_phi * sin(phi), a_r * sin(phi) + a_phi * cos(phi));
//     ctx.log.debug("v_phi: %f", v_phi);

//     velocity = velocity.add(acceleration.mul(dt));
//     P = P.add(velocity.mul(dt));

//     path.push(P);

//     const a = 0;
//     while a < path.length - 1 {
//       drawLine(origin.add(Vec2(path.get(a).x, -path.get(a).y)), origin.add(Vec2(path.get(a + 1).x, -path.get(a + 1).y)), 1, Color(255, 255, 255));
//       a++;
//     }

//     drawVector(Vec2(600, 0), origin, Color(255, 255, 255));
//     drawVector(Vec2(0, -500), origin, Color(255, 255, 255));

//     // e_r und e_phi
//     drawVector(Vec2(e_phi.x * 100, -e_phi.y * 100), origin.add(Vec2(P.x, -P.y)), Color(255, 255, 255));
//     drawVector(Vec2(e_r.x * 100, -e_r.y * 100), origin.add(Vec2(P.x, -P.y)), Color(255, 255, 255));

//     // v
//     drawVector(Vec2(velocity.x, -velocity.y), origin.add(Vec2(P.x, -P.y)), Color(255, 0, 0));
//     drawVector(Vec2(e_phi.x * v_phi, -e_phi.y * v_phi), origin.add(Vec2(P.x, -P.y)), Color(255, 0, 0));
//     drawVector(Vec2(e_r.x * v_r, -e_r.y * v_r), origin.add(Vec2(P.x, -P.y)), Color(255, 0, 0));

//     // a
//     const scaleA = 5;
//     drawVector(Vec2(acceleration.x * scaleA, -acceleration.y * scaleA), origin.add(Vec2(P.x, -P.y)), Color(0, 255, 0));
//     drawVector(Vec2(e_phi.x * a_phi * scaleA, -e_phi.y * a_phi * scaleA), origin.add(Vec2(P.x, -P.y)), Color(0, 255, 0));
//     drawVector(Vec2(e_r.x * a_r * scaleA, -e_r.y * a_r * scaleA), origin.add(Vec2(P.x, -P.y)), Color(0, 255, 0));

//     drawCircle(origin.add(Vec2(P.x, -P.y)), 5, Color(0, 255, 0));

//     endFrame();
//     window.swapBuffers();
//   }

//   destroyClayAndRSGL(window.glfwWindow);

//   glfwTerminate();
//   return 0;
// }

// main(): i32 {
//   // return 0;
//   return window();
// }

namespace Outer {

namespace Inner {

export struct Test {
  data: i8;
  nested: RawPtr<Test>;
}
}
}

namespace Outer {
  namespace Inner.A {

export struct Another<T> {
  b: T;
}
}
  }

namespace impl {

  export foo() {
    const a: Outer.Inner.A.Another<i32>;
    // a == 0;
  }

  export declare bar(fmt: stringview, ...): RawPtr<none>;
  export declare bar2(fmt: stringview, ...);
}

foo() {
  System.print();
}