
import math
import glDraw
import glfw
import gl

main(): int {

    println("TODO for next time: Implement copy semantics for arenas and implement Arenas. Arenas contain raw pointers and they cannot be lifetime checked, which means that cloning them is unsafe (use after free), therefore i must prevent Arenas (or any nonclonable type) from being cloned at compile time. Only references are allowed.");

    let arena = Arena();

    return 0;

    if !glfw.init() {
        return 0;
    }

    const window = glfw.createWindow({ 
        title: "Hello World!",
    });

    window.swapInterval(0);
    gl.init(glfw.getProcAddress());

    gl.viewport(0, 0, 1920, 1080);

    let oldTime = glfw.getTime();
    window.swapBuffers();

    let frameCounter: i16 = 0;

    let fps = 0.0;
    while !window.shouldClose() {
        glfw.pollEvents();

        let now = glfw.getTime();
        let elapsed = now - oldTime;
        oldTime = now;

        gl.clearColor(Color((math.sin(oldTime * 10.0) + 1.0) / 2.0, 0.1, 0.1, 1.0));
        gl.clear();

        if fps == 0.0 {
            fps = 1.0 / elapsed;
        }

        let alpha = 0.001;
        fps = fps * (1.0 - alpha) + 1.0 / elapsed * alpha;

        println("FPS:", fps);
        println("Count: ", frameCounter);

        window.swapBuffers();
    }

    glfw.terminate();

    return 0;
}
