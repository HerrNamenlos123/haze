
unwrap_str(result: Result<String, String>): String {
    if not result.isSuccess {
        const msg = String("Unwrapping result failed: ");
        msg.append(result.error);
        System.panic(msg.cStr());
    }
    return result.success;
}

unwrap_path(result: Result<Fs.Path, String>): Fs.Path {
    if not result.isSuccess {
        const msg = String("Unwrapping result failed: ");
        msg.append(result.error);
        System.panic(msg.cStr());
    }
    return result.success;
}

getSDL(sdlBuildDir: Fs.Path): boolean {
    sdlBuildDir.append(String("SDL"));
    const tarfile = sdlBuildDir;
    tarfile.append(String("src.tar.gz"));
    const cmd = String("haze get https://github.com/libsdl-org/SDL/archive/refs/tags/release-3.2.8.tar.gz ");
    cmd.append(tarfile.path);
    if Process.exec(cmd) != 0 {
        ctx.log.error("Download failed");
        return false;
    }
    cmd = String("tar -zxf ");
    const srcDir = sdlBuildDir;
    srcDir.append(String("src"));
    cmd.append(srcDir.path);
    if Process.exec(cmd) != 0 {
        ctx.log.error("Untarring failed");
        return false;
    }
    return true;
}

cleanup(sdlBuildDir: Fs.Path): boolean {
    sdlBuildDir.append(String("SDL"));
    if Fs.exists(sdlBuildDir) {
        if not Fs.remove(sdlBuildDir).isSuccess {
            return false;
        }
    }
    return true;
}

main(args: List<String>): i32 {
    if (args.length != 2) {
        Console.print("Requires 1 <sdl_build_dir> parameter\n");
        return -1;
    }
    if (!cleanup(Fs.Path(args.get(1)))) {
        return -1;
    }
    if (!getSDL(Fs.Path(args.get(1)))) {
        return -1;
    }
    return 0;
}