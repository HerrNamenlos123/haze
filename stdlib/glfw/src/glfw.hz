
__c__("#include <GLFW/glfw3.h>");
__c__("#include <math.h>");

export extern "C" struct GLFWwindow {};
export extern "C" struct GLFWmonitor {};

extern "C" glfwInit(): i32;
extern "C" glfwTerminate(): none;
extern "C" glfwCreateWindow(width: i32, height: i32, title: str, monitor: GLFWmonitor*, share: GLFWwindow*): GLFWwindow*;
extern "C" glfwWindowShouldClose(w: GLFWwindow*): i32;
extern "C" glfwSwapBuffers(w: GLFWwindow*);
extern "C" glfwSwapInterval(flag: i32);
extern "C" glfwMakeContextCurrent(w: GLFWwindow*);
extern "C" glfwPollEvents();
extern "C" glfwInitHint(hint: i32, value: i32);
extern "C" glfwWindowHint(hint: i32, value: i32);
extern "C" glfwGetTime(): f64;
extern "C" glfwMakeContextCurrent(w: GLFWwindow*);
extern "C" glfwGetProcAddress(procname: str): () => none;

extern "C" strcmp(str1: str, str2: str): i32;
extern "C" getenv(name: str): str;

const GLFW_PLATFORM: i32;
const GLFW_PLATFORM_X11: i32;
const GLFW_ANY_PLATFORM: i32;
const GLFW_CONTEXT_VERSION_MAJOR: i32;
const GLFW_CONTEXT_VERSION_MINOR: i32;
const GLFW_OPENGL_PROFILE: i32;
const GLFW_OPENGL_CORE_PROFILE: i32;

export struct Window {
    handle: GLFWwindow*;

    makeContextCurrent() {
        glfwMakeContextCurrent(this.handle);
    }

    shouldClose(): bool {
        return glfwWindowShouldClose(this.handle) != 0;
    }

    swapBuffers() {
        glfwMakeContextCurrent(this.handle);
        glfwSwapBuffers(this.handle);
    }

    swapInterval(interval: int) {
        glfwMakeContextCurrent(this.handle);
        glfwSwapInterval(interval as i32);
    }
}

export init(): bool {
    if (strcmp(getenv("XDG_CURRENT_DESKTOP"), "GNOME") == 0) {
        glfwInitHint(GLFW_PLATFORM, GLFW_PLATFORM_X11);
    }
    else {
        glfwInitHint(GLFW_PLATFORM, GLFW_ANY_PLATFORM);
    }
    return glfwInit() != 0;
}

export terminate() {
    glfwTerminate();
}

export createWindow(width: int, height: int, title: str): Window {
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3 as i32);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3 as i32);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    const handle = glfwCreateWindow(width as i32, height as i32, title, 0 as GLFWmonitor*, 0 as GLFWwindow*);
    return Window { handle: handle };
}

export pollEvents() {
    glfwPollEvents();
}

export getTime(): real {
    return glfwGetTime() as real;
}

export getProcAddress(): (name: str) => none* {
    return glfwGetProcAddress as (name: str) => none*;
}