
__c__("#include <GLFW/glfw3.h>");
__c__("#include <math.h>");
__c__("#include <string.h>");

export extern "C" struct GLFWwindow {};
export extern "C" struct GLFWmonitor {};

extern "C" noemit strcmp(str1: str, str2: str): i32;
extern "C" noemit getenv(name: str): str;

const GLFW_PLATFORM: i32;
const GLFW_PLATFORM_X11: i32;
const GLFW_ANY_PLATFORM: i32;
const GLFW_CONTEXT_VERSION_MAJOR: i32;
const GLFW_CONTEXT_VERSION_MINOR: i32;
const GLFW_OPENGL_PROFILE: i32;
const GLFW_OPENGL_CORE_PROFILE: i32;

namespace raw {
    extern "C" glfwInit(): i32;
    extern "C" glfwTerminate(): void;
    extern "C" glfwCreateWindow(width: i32, height: i32, title: str, monitor: GLFWmonitor*, share: GLFWwindow*): GLFWwindow*;
    extern "C" glfwWindowShouldClose(w: GLFWwindow*): i32;
    extern "C" glfwSwapBuffers(w: GLFWwindow*);
    extern "C" glfwSwapInterval(flag: i32);
    extern "C" glfwMakeContextCurrent(w: GLFWwindow*);
    extern "C" glfwPollEvents();
    extern "C" glfwInitHint(hint: i32, value: i32);
    extern "C" glfwWindowHint(hint: i32, value: i32);
    extern "C" glfwGetTime(): f64;
    // extern "C" glfwMakeContextCurrent(w: GLFWwindow*);
    extern "C" glfwGetProcAddress(procname: str): () => void;

    export init(): bool {
        return glfwInit() != 0;
    }

    export terminate(): void {
        glfwTerminate();
    }

    export createWindow(width: i32, height: i32, title: str, monitor: GLFWmonitor*, share: GLFWwindow*): GLFWwindow* {
        return glfwCreateWindow(width, height, title, monitor, share);
    }

    export windowShouldClose(w: GLFWwindow*): bool {
        return glfwWindowShouldClose(w) != 0;
    }

    export swapBuffers(w: GLFWwindow*) {
        glfwSwapBuffers(w);
    }

    export swapInterval(flags: i32) {
        glfwSwapInterval(flags);
    }

    export makeContextCurrent(w: GLFWwindow*) {
        glfwMakeContextCurrent(w);
    }

    export pollEvents() {
        glfwPollEvents();
    }

    export initHint(hint: i32, value: i32) {
        glfwInitHint(hint, value);
    }

    export windowHint(hint: i32, value: i32) {
        glfwWindowHint(hint, value);
    }

    export getTime(): f64 {
        return glfwGetTime() as f64;
    }

    export getProcAddress(procname: str): () => void {
        return glfwGetProcAddress(procname);
    }
}

export struct Window {
    handle: GLFWwindow*;

    makeContextCurrent() {
        raw.makeContextCurrent(this.handle);
    }

    shouldClose(): bool {
        return raw.windowShouldClose(this.handle);
    }

    swapBuffers() {
        raw.makeContextCurrent(this.handle);
        raw.swapBuffers(this.handle);
    }

    swapInterval(interval: int) {
        if interval >= 0 && interval <= 10 {
            raw.makeContextCurrent(this.handle);
            raw.swapInterval(interval as i32);
        }
    }
}

export struct WindowSizeConfig {
    width: int = 1080;
    height: int = 720;
}

export struct WindowConfig {
    title: str;
    size: WindowSizeConfig = {};
}

export init(): bool {
    const desktop = getenv("XDG_CURRENT_DESKTOP");
    const valid = true;
    __c__("valid = desktop != 0;");
    if (valid && strcmp(desktop, "GNOME") == 0) {
        raw.initHint(GLFW_PLATFORM, GLFW_PLATFORM_X11);
    }
    else {
        raw.initHint(GLFW_PLATFORM, GLFW_ANY_PLATFORM);
    }
    return raw.init();
}

export terminate() {
    raw.terminate();
}

export createWindow(config: WindowConfig): Window {
    raw.windowHint(GLFW_CONTEXT_VERSION_MAJOR, 3 as i32);
    raw.windowHint(GLFW_CONTEXT_VERSION_MINOR, 3 as i32);
    raw.windowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    const width = config.size.width;
    const height = config.size.height;
    const widthI32: i32 = 0;
    const heightI32: i32 = 0;
    if (width >= i32.min && width <= i32.max) {
        widthI32 = width;
    }
    else {
        assert(false);
    }
    if (height >= i32.min && height <= i32.max) {
        heightI32 = height;
    }
    const handle = raw.createWindow(widthI32, heightI32, config.title, nullptr, nullptr);
    return Window { handle: handle };
}

export pollEvents() {
    raw.pollEvents();
}

export getTime(): real {
    return raw.getTime() as real;
}

export getProcAddress(): (name: str) => void* {
    const rawProc = raw.getProcAddress;
    const castedProc: (name: str) => void* = uninitialized;
    __c__("castedProc = (void*)rawProc;");
    return castedProc;
}