
inject "#include <GLFW/glfw3.h>";
inject "#include <math.h>";

export extern "C" noemit struct GLFWwindow {};
extern "C" noemit struct GLFWmonitor {};
extern "C" noemit glfwInit(): boolean;
extern "C" noemit glfwTerminate(): none;
extern "C" noemit glfwMakeContextCurrent(w: GLFWwindow*);
extern "C" noemit glfwWindowShouldClose(w: GLFWwindow*): boolean;
extern "C" noemit glfwCreateWindow(width: i32, height: i32, title: str, monitor: GLFWmonitor*, share: GLFWwindow*): GLFWwindow*;
extern "C" noemit glClear(flag: i64): boolean;
extern "C" noemit glfwSwapBuffers(w: GLFWwindow*);
extern "C" noemit glfwPollEvents();
extern "C" noemit glfwSwapInterval(flag: i8);
extern "C" noemit glfwGetTime(): f64;
extern "C" noemit glfwGetKey(w: GLFWwindow*, key: i32): i32;
extern "C" noemit glfwGetMouseButton(w: GLFWwindow*, button: i32): i32;

// inject "#include \"../../../gl.c\"";
// prebuildcmd "pkg-config --version";
// link "$(pkg-config --cflags --libs gtk+-3.0)"
// link "$(pkg-config --cflags --libs appindicator3-0.1)"
// link "-lGL -Iclay -lm -lglfw"

// div(cb: () => none) {
//   __c__("Clay_ElementDeclaration elem = { .layout = { .sizing = { CLAY_SIZING_FIXED(400), CLAY_SIZING_FIXED(200) } }, .backgroundColor = { 217, 91, 67, 255 } };");
//   __c__("CLAY(elem) {");
//     // if (cb) {
//       cb();
//     // }
//   __c__("}");
// }

struct Window {
    glfwWindow: GLFWwindow*;

    constructor(width: i32, height: i32, title: str): Result<Window, str> {
      __c__("glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);");
      __c__("glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);");
      __c__("glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);");
      const window = glfwCreateWindow(width, height, title, 0 as GLFWmonitor*, 0 as GLFWwindow*);
      if not window {
          return Result<Window, str>.error("Window creation failed");
      }

      glfwMakeContextCurrent(window);
      glfwSwapInterval(1 as i8);

      // initClayAndRSGL(window);

      return Result<Window, str>.success(Window { glfwWindow: window });
    }

    makeContextCurrent() {
      glfwMakeContextCurrent(this.glfwWindow);
    }

    setVSync(enabled: boolean) {
      glfwSwapInterval(enabled as i8);
    }

    shouldClose(): boolean {
      return glfwWindowShouldClose(this.glfwWindow);
    }

    swapBuffers() {
      glfwSwapBuffers(this.glfwWindow);
    }

    pollEvents() {
      glfwPollEvents();
    }

    getCursorPos(): Vec2 {
      const pos = Vec2(0 as f64, 0 as f64);
      __c__("glfwGetCursorPos(this->glfwWindow, &pos.x, &pos.y)");
      return pos;
    }

    getKey(key: i32): boolean {
      return glfwGetKey(this.glfwWindow, key) != 0;
    }

    getMouseButton(button: i32): boolean {
      return glfwGetMouseButton(this.glfwWindow, button) != 0;
    }
}

drawLine(p1: Vec2, p2: Vec2, thickness: f64, color: Color) {
  if thickness > 7 {
    thickness = 7;
  }
  // __c__("RSGL_drawLine((RSGL_point) { p1.x, p1.y }, (RSGL_point) { p2.x, p2.y }, thickness, RSGL_RGB(color.r, color.g, color.b))");
  // __c__("RSGL_drawCircle((RSGL_circle) { p1.x - thickness / 2.0, p1.y - thickness / 2.0, thickness }, RSGL_RGB(color.r, color.g, color.b))");
  // __c__("RSGL_drawCircle((RSGL_circle) { p2.x - thickness / 2.0, p2.y - thickness / 2.0, thickness }, RSGL_RGB(color.r, color.g, color.b))");
}

drawCircle(center: Vec2, radius: i16, color: Color) {
  // __c__("RSGL_drawCircle((RSGL_circle) { center.x - radius, center.y - radius, radius * 2 }, RSGL_RGB(color.r, color.g, color.b))");
}

drawTriangle(p1: Vec2, p2: Vec2, p3: Vec2, color: Color) {
  // __c__("RSGL_drawTriangle((RSGL_triangle) { .p1 = (RSGL_point) { p1.x, p1.y }, .p2 = (RSGL_point) { p2.x, p2.y }, .p3 = (RSGL_point) { p3.x, p3.y } }, RSGL_RGB(color.r, color.g, color.b))");
}

drawVector(vector: Vec2, position: Vec2, color: Color) {
  const arrowLength = 25.0 as f64;
  const arrowAngle = Math.degToRad(30);
  const lineThickness = 2;

  if vector.length() < arrowLength * 4 {
    arrowLength = vector.length() / 4.0;
  }

  const tip = position.add(vector);
  const dir = vector.normalize();
  const sidedir = Vec2(dir.y, -dir.x);
  drawLine(position, tip, lineThickness, color);
  const cross = tip.sub(dir.mul(arrowLength));
  const sideVec = sidedir.mul(arrowLength * Math.tan(arrowAngle / 2));
  drawTriangle(tip, cross.add(sideVec), cross.sub(sideVec), color);
}

getTime(): f64 {
  return glfwGetTime();
}

extern "C" noemit glfwPlatformSupported(flag: i32): boolean;
extern "C" noemit glfwInitHint(a: i32, b: i32);

// extern "C" const GLFW_PLATFORM_WAYLAND: i32;
// extern "C" const GLFW_PLATFORM: i32;

export TM2(): i32 { 
  if not glfwInit() {
    printf("Initializing GLFW failed\n");
    return 0;
  }

  const windowResult = Window(1080, 720, "Test 1");
  if not windowResult.isSuccess {
      printf("%s\n", windowResult.errorValue);
      glfwTerminate();
      return 0;
  }
  const window = windowResult.successValue;

  const v_phi_const = 50;
  const R = 300;

  const P = Vec2(0, 0);
  const velocity = Vec2(0, 0);
  const acceleration = Vec2(0, 0);

  const oldTime = getTime();
  const startTime = getTime();

  // const path = List<Vec2>();

  while !window.shouldClose() {
    // beginFrame();
    // frame();

    // text("Hallo cooler Test!", 60);
    // div(() => {
    //   text("Oh Yeah!", 18);
    // });

    window.pollEvents();
    const now = getTime();
    const dt = now - oldTime;
    oldTime = now;
    const elapsed = now - startTime;

    const mouse = window.getCursorPos();

    if window.getKey(32) {
      P = Vec2(R, 0);
      velocity = Vec2(0, v_phi_const);
      acceleration = Vec2(0, 0);
      startTime = getTime();
      // path.clear();
    }

    const origin = Vec2(200, 600);
    const m = mouse.sub(origin);
    m = Vec2(m.x, -m.y);
    if window.getMouseButton(0) {
      P = Vec2(m.x, m.y);
      velocity = Vec2(0, v_phi_const);
      acceleration = Vec2(0, 0);
      startTime = getTime();
      // path.clear();
    }

    // =========================================

    const phi = Math.atan2(P.y, P.x);

    const e_r = P.normalize();
    const e_phi = Vec2(-e_r.y, e_r.x);

    const v_phi = velocity.dot(e_phi);
    const v_r = velocity.dot(e_r);

    const a_phi = Math.pow(v_phi, 2) / R * phi;
    const a_r = Math.pow(v_phi, 2) / R * 
                (
                    Math.cosh((2*v_phi*elapsed) / (Math.sqrt(2) * R)) 
                    - 
                    1/Math.pow(Math.cosh((v_phi*elapsed)/(Math.sqrt(2)*R)), 2));

    acceleration = Vec2(a_r * Math.cos(phi) - a_phi * Math.sin(phi), a_r * Math.sin(phi) + a_phi * Math.cos(phi));
    // ctx.log.debug("v_phi: %f", v_phi);

    velocity = velocity.add(acceleration.mul(dt));
    P = P.add(velocity.mul(dt));

    // path.push(P);

    // const a = 0;
    // while a < path.length - 1 {
    //   drawLine(origin.add(Vec2(path.get(a).x, -path.get(a).y)), origin.add(Vec2(path.get(a + 1).x, -path.get(a + 1).y)), 1, Color(255, 255, 255));
    //   a++;
    // }

    drawVector(Vec2(600, 0), origin, Color(255, 255, 255));
    drawVector(Vec2(0, -500), origin, Color(255, 255, 255));

    // e_r und e_phi
    drawVector(Vec2(e_phi.x * 100, -e_phi.y * 100), origin.add(Vec2(P.x, -P.y)), Color(255, 255, 255));
    drawVector(Vec2(e_r.x * 100, -e_r.y * 100), origin.add(Vec2(P.x, -P.y)), Color(255, 255, 255));

    // v
    drawVector(Vec2(velocity.x, -velocity.y), origin.add(Vec2(P.x, -P.y)), Color(255, 0, 0));
    drawVector(Vec2(e_phi.x * v_phi, -e_phi.y * v_phi), origin.add(Vec2(P.x, -P.y)), Color(255, 0, 0));
    drawVector(Vec2(e_r.x * v_r, -e_r.y * v_r), origin.add(Vec2(P.x, -P.y)), Color(255, 0, 0));

    // a
    const scaleA = 5;
    drawVector(Vec2(acceleration.x * scaleA, -acceleration.y * scaleA), origin.add(Vec2(P.x, -P.y)), Color(0, 255, 0));
    drawVector(Vec2(e_phi.x * a_phi * scaleA, -e_phi.y * a_phi * scaleA), origin.add(Vec2(P.x, -P.y)), Color(0, 255, 0));
    drawVector(Vec2(e_r.x * a_r * scaleA, -e_r.y * a_r * scaleA), origin.add(Vec2(P.x, -P.y)), Color(0, 255, 0));

    drawCircle(origin.add(Vec2(P.x, -P.y)), 5, Color(0, 255, 0));

    // endFrame();
    window.swapBuffers();
  }

  // destroyClayAndRSGL(window.glfwWindow);

  glfwTerminate();
  return 0;
}