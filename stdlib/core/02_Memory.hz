
extern "C" calloc(num: u64, size: u64): RawPtr<none>;
extern "C" realloc(ptr: RawPtr<none>, newSize: u64): RawPtr<none>;
extern "C" free(ptr: RawPtr<none>);
extern "C" memcpy(to: RawPtr<none>, from: RawPtr<none>, length: u64): RawPtr<none>;

export namespace Memory {
  allocate(size: u64): RawPtr<none> {
    return ctx.mem.alloc(size);
  }

  copy(to: RawPtr<none>, from: RawPtr<none>, length: u64) {
    memcpy(to, from, length);
  }

  struct Buffer {
    data: RawPtr<none>;
    size: u64;

    constructor(size: u64): Memory.Buffer {
      const a = ctx;
      const buffer = Memory.allocate(size);
      if !buffer {
        System.panic("Allocation failed");
      }
      return Memory.Buffer {
        .data: buffer,
        .size: size,
      };
    }

    resize(newSize: u64) {
      const newData = Memory.allocate(newSize);
      if !newData {
        System.panic("Allocation failed");
      }
      Memory.copy(newData, this.data, this.size);
      this.size = newSize;
      this.data = newData;
    }
  }
}