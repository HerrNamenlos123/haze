extern "C" abort();
extern "C" assert(cond: boolean);
extern "C" printf(str: stringview, ...);

inject "#include <stdarg.h>";
inject "#include <stdlib.h>";
inject "#include <stdio.h>";
inject "#include <math.h>";
inject "#include <time.h>";
inject "#include <assert.h>";
inject "#include <memory.h>";

namespace Console {
  export print(fmt: stringview, ...) {
    __c__("va_list args");
    __c__("va_start(args, fmt)");
    __c__("vprintf(fmt, args)");
    __c__("va_end(args)");
  }
}

namespace System {
  export panic(msg: stringview) {
    Console.print("Thread panicked: %s\n", msg);
    abort();
  }

  __setupContext() {
    ctx.log.trace = (fmt: stringview, ...) => {
      printf("[\033[37mtrace\033[0m] ");
      __c__("va_list args");
      __c__("va_start(args, fmt)");
      __c__("vprintf(fmt, args)");
      __c__("va_end(args)");
      printf("\n");
    };
    ctx.log.info = (fmt: stringview, ...) => {
      printf("[\033[32minfo\033[0m] ");
      __c__("va_list args");
      __c__("va_start(args, fmt)");
      __c__("vprintf(fmt, args)");
      __c__("va_end(args)");
      printf("\n");
    };
    ctx.log.debug = (fmt: stringview, ...) => {
      printf("[\033[34mdebug\033[0m] ");
      __c__("va_list args");
      __c__("va_start(args, fmt)");
      __c__("vprintf(fmt, args)");
      __c__("va_end(args)");
      printf("\n");
    };
    ctx.log.warn = (fmt: stringview, ...) => {
      printf("[\033[33mwarn\033[0m] ");
      __c__("va_list args");
      __c__("va_start(args, fmt)");
      __c__("vprintf(fmt, args)");
      __c__("va_end(args)");
      printf("\n");
    };
    ctx.log.error = (fmt: stringview, ...) => {
      printf("[\033[31merror\033[0m] ");
      __c__("va_list args");
      __c__("va_start(args, fmt)");
      __c__("vprintf(fmt, args)");
      __c__("va_end(args)");
      printf("\n");
    };
    ctx.mem.alloc = (size: u64): RawPtr<none> => {
      return calloc(1, size);
    };
  }
}

__setupStdlib() {
  System.__setupContext();
  Time.__assertTypes();
}