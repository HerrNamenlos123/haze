
extern "C" calloc(num: u64, size: u64): RawPtr<none>;
extern "C" realloc(ptr: RawPtr<none>, newSize: u64): RawPtr<none>;
extern "C" free(ptr: RawPtr<none>);
extern "C" memcpy(to: RawPtr<none>, from: RawPtr<none>, length: u64): RawPtr<none>;

// export struct Array<T, Size> {
//   length: u64;
//   data: __C_Array<i32, Size>;
// }

namespace Memory {
  const DEFAULT_ARENA_SIZE = 16 * 1024 * 1024;

  export generalPurposeMalloc(size: u64): RawPtr<none> => {
    return calloc(1, size);
  }

  export generalPurposeFree(ptr: RawPtr<none>) => {
    free(ptr);
  }

  export copy(to: RawPtr<none>, from: RawPtr<none>, length: u64) => {
    memcpy(to, from, length);
  }

  export struct ArenaChunk {
    nextChunk: RawPtr<ArenaChunk>;
    allocated: u64;
    capacity: u64;
    dataFirstByte: u8;

    canAllocate(size: u64): boolean => {
      return this.allocated + size <= this.capacity;
    }

    allocate(size: u64): RawPtr<none> => {
      if this.allocated + size > this.capacity {
        System.panic("ArenaChunk was instructed to allocate, but it is too small");
      }
      const ptr = 0 as RawPtr<none>;
      __c__("ptr = &(this->dataFirstByte) + this->allocated");
      this.allocated += size;
      return ptr;
    }
  }

  export struct Arena {
    firstChunk: RawPtr<ArenaChunk>;

    init() => {
      if this.firstChunk {
        System.panic("Arena is already initialized");
      }
      const chunkSize = sizeof<RawPtr<none>> + 2 * sizeof<u64> + Memory.DEFAULT_ARENA_SIZE;
      this.firstChunk = Memory.generalPurposeMalloc(chunkSize) as RawPtr<ArenaChunk>;
      this.firstChunk.capacity = Memory.DEFAULT_ARENA_SIZE;
    }

    allocate(size: u64): RawPtr<none> => {
      let chunk = this.firstChunk;
      while chunk.nextChunk {
        chunk = chunk.nextChunk;
      }
      if not chunk.canAllocate(size) {
        const chunkSize = sizeof<RawPtr<none>> + 2 * sizeof<u64> + Math.maxu64(Memory.DEFAULT_ARENA_SIZE, size);
        chunk.nextChunk = Memory.generalPurposeMalloc(chunkSize) as RawPtr<ArenaChunk>;
        if not chunk.nextChunk {
          System.panic("Allocation failed while enlarging arena");
        }
        chunk.nextChunk.capacity = Math.maxu64(Memory.DEFAULT_ARENA_SIZE, size);
        ctx.log.warn("Arena was enlarged. Consider creating a bigger, short-lived arena for memory-heavy calculations.");
        chunk = chunk.nextChunk;
        if not chunk.canAllocate(size) {
          Console.print("New chunk: Allocated=%lu, capacity=%lu, requested=%lu\n", chunk.allocated, chunk.capacity, size);
          System.panic("Allocation failed: Requested size is too large to fit in Arena chunk (Internal error)");
        }
      }
      return chunk.allocate(size);
    }

    cleanup() => {
      let chunk = this.firstChunk;
      while chunk {
        const next = chunk.nextChunk;
        Memory.generalPurposeFree(chunk);
        chunk = next;
      }
      this.firstChunk = 0 as RawPtr<ArenaChunk>;
    }
  }

  // struct Arena {
  //   __impl: ArenaImpl;

  //   constructor(): Arena {
  //     const arena: ArenaImpl;
  //     arena.init();
  //     return Arena<T> { .__impl: arena };
  //   }

  //   allocate(size: u64): RawPtr<none> {
  //     return this.__impl.allocate(size);
  //   }
  // }

  export struct Buffer {
    data: RawPtr<none>;
    size: u64;

    constructor(size: u64): Memory.Buffer => {
      return Memory.Buffer {
        .data: ctx.mem.alloc(size),
        .size: size,
      };
    }

    resize(newSize: u64) => {
      const newData = ctx.mem.alloc(newSize);
      Memory.copy(newData, this.data, this.size);
      this.size = newSize;
      this.data = newData;
    }
  }

  __setupMemoryContext() => {
    ctx.mem.alloc = (size: u64): RawPtr<none> => {
      const arena = ctx.mem.globalDefaultArena as RawPtr<Arena>;
      return arena.allocate(size);
    };
    const arena = ctx.mem.globalDefaultArena as RawPtr<Arena>;
    arena.init();
  }
}