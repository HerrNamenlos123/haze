
export struct Result<TSuccess, TError> {
  success: TSuccess;
  error: TError;
  isSuccess: boolean;
}

// export struct List<_List_T> {
//   buffer: Memory.Buffer;
//   length: u64;

//   constructor(): List<_List_T> => {
//     const initialCapacity = 4;
//     return List<_List_T> {
//       .buffer = Memory.Buffer(initialCapacity * sizeof<_List_T>),
//       .length = 0,
//     };
//   }

//   reserve(count: u64): none => {
//     if count <= this.capacity() {
//       return;
//     }
//     this.buffer.resize(count * sizeof<_List_T>);
//   }

//   push(n: _List_T) => {
//     if this.length >= this.capacity() {
//       this.reserve(this.length * 2);
//     }
//     const buf = this.buffer.data as RawPtr<_List_T>;
//     __c__("buf[this->length] = n");
//     this.length = this.length + 1;
//   }

//   pop(): _List_T => {
//     const back = this.get(this.length - 1);
//     this.length = this.length - 1;
//     return back;
//   }

//   get(n: u64): _List_T => {
//     if n < 0 or n >= this.length {
//       System.panic("OUT OF BOUNDS");
//     }
//     const buf = this.buffer.data as RawPtr<_List_T>;
//     const result: _List_T;
//     __c__("result = buf[n]");
//     return result;
//   }

//   capacity(): u64 => {
//     return this.buffer.size / sizeof<_List_T>;
//   }

//   clear() => {
//     this.length = 0;
//   }
// }

// export struct String {
//   data: Memory.Buffer;
//   length: u64;

//   constructor(str: stringview): String => {
//     const length: u64 = 0;
//     __c__("length = strlen(str)");
//     const newStr = String {
//       .data = Memory.Buffer(length + 1),
//       .length = length,
//     };
//     Memory.copy(newStr.data.data, str as RawPtr<u8>, length + 1);
//     return newStr;
//   }

//   reserve(size: u64): none => {
//     if size <= this.capacity() {
//       return;
//     }
//     this.data.resize(size);
//   }

//   append(other: String) => {
//     if this.length + other.length >= this.capacity() {
//       this.reserve(this.length + other.length + 1);
//     }
//     const dest = this.data.data;
//     __c__("dest += this->length");
//     Memory.copy(dest, other.data.data, other.length);
//     this.length += other.length;
//     __c__("((uint8_t*)dest)[this->length] = 0");
//   }

//   get(index: u64): u8 => {
//     const cchar = 0 as u8;
//     if index < 0 or index >= this.length {
//       System.panic("String index out of bounds");
//     }
//     __c__("cchar = ((uint8_t*)this->data.data)[index]");
//     return cchar;
//   }

//   pop_back(count: u64) => {
//     this.length -= count;
//   }

//   capacity(): u64 => {
//     return this.data.size;
//   }

//   clear() => {
//     this.length = 0;
//   }

//   cStr(): stringview => {
//     return this.data.data as RawPtr<u8> as stringview;
//   }

//   back(): u8 => {
//     const lastChar: u8;
//     __c__("lastChar = ((uint8_t*)this->data.data)[this->length - 1]");
//     return lastChar;
//   }

//   // split(delimiter: String): List<String> {
//   //   const list = List<String>();
//   //   const tmp = String("");

//   //   let index = 0;
//   //   while index < this.length {
//   //   }
//   // }
// }