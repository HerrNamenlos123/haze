extern "C" abort();
extern "C" noemit assert(cond: boolean);
extern "C" noemit printf(str: str, ...);

inject "#include <stdarg.h>";
inject "#include <stdlib.h>";
inject "#include <stdio.h>";
inject "#include <math.h>";
inject "#include <time.h>";
inject "#include <assert.h>";
inject "#include <memory.h>";

namespace Console {
  export print(fmt: str, ...) => {
    __c__("va_list args");
    __c__("va_start(args, fmt)");
    __c__("vprintf(fmt, args)");
    __c__("va_end(args)");
  }
}

namespace System {
  export panic(msg: str) => {
    Console.print("Thread panicked: %s\n", msg);
    abort();
  }

  __setupContext() => {
    // ctx.log.trace = (fmt: str, ...) => {
    //   printf("[\u001b[37mtrace\u001b[0m] ");
    //   __c__("va_list args");
    //   __c__("va_start(args, fmt)");
    //   __c__("vprintf(fmt, args)");
    //   __c__("va_end(args)");
    //   printf("\n");
    // };
    // ctx.log.info = (fmt: str, ...) => {
    //   printf("[\u001b[32minfo\u001b[0m] ");
    //   __c__("va_list args");
    //   __c__("va_start(args, fmt)");
    //   __c__("vprintf(fmt, args)");
    //   __c__("va_end(args)");
    //   printf("\n");
    // };
    // ctx.log.debug = (fmt: str, ...) => {
    //   printf("[\u001b[34mdebug\u001b[0m] ");
    //   __c__("va_list args");
    //   __c__("va_start(args, fmt)");
    //   __c__("vprintf(fmt, args)");
    //   __c__("va_end(args)");
    //   printf("\n");
    // };
    // ctx.log.warn = (fmt: str, ...) => {
    //   printf("[\u001b[33mwarn\u001b[0m] ");
    //   __c__("va_list args");
    //   __c__("va_start(args, fmt)");
    //   __c__("vprintf(fmt, args)");
    //   __c__("va_end(args)");
    //   printf("\n");
    // };
    // ctx.log.error = (fmt: str, ...) => {
    //   printf("[\u001b[31merror\u001b[0m] ");
    //   __c__("va_list args");
    //   __c__("va_start(args, fmt)");
    //   __c__("vprintf(fmt, args)");
    //   __c__("va_end(args)");
    //   printf("\n");
    // };
    // Memory.__setupMemoryContext();
  }
}

__setupStdlib() => {
  System.__setupContext();
  Time.__assertTypes();
}