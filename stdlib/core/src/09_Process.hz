inject "#include <linux/limits.h>";
inject "#include <unistd.h>";
inject "#include <errno.h>";

namespace Process {
    export cwd(): Result<Fs.Path, String> {
        const path = String("");
        const maxlen: u64 = 0;
        __c__("maxlen = PATH_MAX");
        path.reserve(maxlen);
        const result = 0 as RawPtr<u8>;
        __c__("result = (uint8_t*)getcwd(path.data.data, maxlen)");
        __c__("path.length = strlen(path.data.data)");
        if result as u64 != 0 {
            return Result<Fs.Path, String> {
                .success: Fs.Path(path),
                .isSuccess: true,
            };
        }
        let err: stringview;
        __c__("err = strerror(errno)");
        const error = String("getcwd() error: ");
        error.append(String(err));
        return Result<Fs.Path, String> {
            .error: error,
            .isSuccess: false,
        };
    }

    export exec(cmd: String): i32 {
        const cmd_cstr = cmd.cStr() as RawPtr<u8>;
        const result: i32 = 0;
        ctx.log.trace("exec %s\n", cmd.cStr());
        __c__("result = system((char*)cmd_cstr)");
        if result != 0  {
            result = -1;
        }
        return result;
    }

    export __loadArgv(count: i32, args: RawPtr<RawPtr<u8>>): List<String> {
        let i = 0;
        const list = List<String>();
        while i < count {
            const c_str: stringview;
            __c__("c_str = ((char**)args)[i]");
            list.push(String(c_str));
            i++;
        }
        return list;
    }
}