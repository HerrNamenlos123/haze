
__c__("#include <stdio.h>");

namespace builtin {
    export extern "C" noemit printf(fmt: c_str, ...);
}

namespace fmt {
    export struct FormatArgs {
        formatSpecifier: str = "";
    }

    export struct StringWriter {
        buffer: *u8 = nullptr;
        length: usize = 0;

        write(value: str) {        
            if this.buffer != nullptr {
                __c__("memcpy(this->buffer + this->length, value.data, value.length);");
                // for i in 0..value.len {
                //     this.buffer[length + i] = value[i];
                // }
            }
            this.length += value.length;
        }
    }

    export format<T>(arena: &Arena, value: T, args: FormatArgs): str {
        const writer = StringWriter {};
        format_to(writer as &StringWriter, value, args);
        const string = arena.allocateRaw(writer.length);
        const writer2 = StringWriter { buffer: string };
        format_to(writer2 as &StringWriter, value, args);
        return str(writer2.buffer, writer2.length);
    }

    export format_to(writer: &StringWriter, value: int, args: FormatArgs) {
        let v = value;
        if v < 0 {
            writer.write("-");
            if v == -2147483648 {
                writer.write("2147483648");
                return;
            }
            v = -v;
        }

        // Find highest divisor
        // let div = 1;
        // while v / div >= 10 {
        //     div *= 10;
        // }

        // while div > 0 {
        //     let digit = v / div;
        //     writer.write(digitToStr(digit));
        //     v %= div;
        //     div /= 10;
        // }
    }

    digitToStr(digit: int): str {
        assert(digit >= 0 && digit <= 9);
        const ch: u8 = 0;
        __c__("ch = '0' + digit;");
        return str(&ch, 1);
    }

    export format_to(writer: &StringWriter, value: i8, args: FormatArgs) {
        format_to(writer, value as int, args);
    }

    export format_to(writer: &StringWriter, value: i16, args: FormatArgs) {
        format_to(writer, value as int, args);
    }

    export format_to(writer: &StringWriter, value: i32, args: FormatArgs) {
        format_to(writer, value as int, args);
    }

    export format_to(writer: &StringWriter, value: i64, args: FormatArgs) {
        format_to(writer, value as int, args);
    }
}

export print(args: ...) {
    for comptime arg in args {
        if comptime typeof(arg) == int {
            builtin.printf("%ld", arg);
        }
        else if typeof(arg) == str {
            const s = arg;
            __c__("fwrite(s.data, 1, s.length, stdout);");
            // builtin.printf("%s", arg);
        }
        else if typeof(arg) == bool {
            if arg {
                builtin.printf("true");
            }
            else {
                builtin.printf("false");
            }
        }
        else if typeof(arg) == usize {
            builtin.printf("%zu", arg);
        }
        else if typeof(arg) == real {
            builtin.printf("%f", arg);
        }
        else if typeof(arg) == u8 || typeof(arg) == u16 || typeof(arg) == u32 {
            builtin.printf("%u", arg);
        }
        else if typeof(arg) == u64 {
            builtin.printf("%lu", arg);
        }
        else if typeof(arg) == i8 || typeof(arg) == i16 || typeof(arg) == i32 {
            builtin.printf("%d", arg);
        }
        else if typeof(arg) == i64 {
            builtin.printf("%ld", arg);
        }
        else if typeof(arg) == Vec2 || typeof(arg) == type<&Vec2> {
            builtin.printf("(%f, %f)", arg.x, arg.y);
        }
        else if typeof(arg) == Vec3 || typeof(arg) == type<&Vec3> {
            builtin.printf("(%f, %f, %f)", arg.x, arg.y, arg.z);
        }
        else if typeof(arg) == Vec4 || typeof(arg) == type<&Vec4> {
            builtin.printf("(%f, %f, %f, %f)", arg.x, arg.y, arg.z, arg.w);
        }
        else {
            static_assert(false, "Type not yet supported in print");
        }
    }
}

export println(args: ...) {
    for comptime arg, i in args {
        print(arg);
        if comptime i as int != args.length as int - 1 as int {
            print(" ");
        }
    }
    print("\n");
}
