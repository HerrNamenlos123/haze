
extern "C" printf(fmt: str, ...);

struct CString {
}

struct SharedPtr<T> {
  target: T*;

  get(): T& => {
    return this.target;
  }
}

struct LogContext {
  trace: (fmt: str, ...) => none;
  info: (fmt: str, ...) => none;
  debug: (fmt: str, ...) => none;
  warn: (fmt: str, ...) => none;
  error: (fmt: str, ...) => none;
}

struct Context {
  log: LogContext;
  mem: MemContext;
};

struct MemContext {
  alloc: (size: u64) => none*;
  globalDefaultArena: none*;
}

struct Foo {
  value: i32;

  fooGet(): Foo => {
    return Foo {
      .value: 5,
    };
  }
}

namespace Outer.Inner {
  struct Subspace<T> {}
}

struct Test {
  test: i8;
}

foo() => {
  const s = SharedPtr<Test> { .target: 0 as Test* };
  const a = s.get().test;
  // const b: Outer.Inner.Subspace<SharedPtr<Test>>;
}
