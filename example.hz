declare "C" printf(str: stringview, d: i8);
declare "C" calloc(num: u64, size: u64): RawPtr<none>;
declare "C" free(ptr: RawPtr<none>);

malloc(size: u64): RawPtr<none> {
  return calloc(1, size);
}

struct Test {
  data: i32;
}

struct MemoryBuffer {
  data: RawPtr<none>;
  size: u64;

  constructor(size: u64) {
    return MemoryBuffer {
      .data: malloc(size),
      .size: size,
    };
  }

  destructor() {
    free(this.data);
  }
}

struct List<T> {
  buffer: MemoryBuffer;

  constructor() {
    return List<T> {
      .buffer: MemoryBuffer(0),
    };
  }
}

main(): i32 {
  // printf("Hello world!\n");

  const s = List<i32>();
  // s.constructor();

  // printf("Data: %d\n", buf.length);

  return 0;
}