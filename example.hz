
//import "test.hz"

declare "C" printf(str: stringview);

struct Array<T> {
  data: T;
  length: u64;

  // constructor() {
  //   return Array<T> {
  //     .data: 0,
  //     .length: 0,
  //   };
  // }

  test(myArray: Array<T>): Array<T> {
    return Array<T> {
      .data: 0,
      .length: 0,
    };
  }

  toNumber(): i64 {
    return 64;
  }
}

declare "C" calloc2(size: u64): Array<i32>;
declare "C" calloc(size: u64): RawPtr<i32>;

struct MemoryBuffer {
  data: i16;
  length: u64;

  constructor(size: u64) {
    printf("Constructing MemoryBuffer\n");
    const buffer = MemoryBuffer {
      .data: 0,
      .length: size,
    };
    // __c__("buffer.data = calloc(size)");
    return buffer;
  }

  destructor() {
    printf("Destructing MemoryBuffer\n");
    // __c__("free(buffer.data)");
  }

  // __copy__(): MemoryBuffer {
  //     // const ptr = malloc(size);
  //   return MemoryBuffer {
  //     .data: 0,
  //   };
  // }
}
// declare "C" malloc(n: i32, test: String): u64;

main(): i32 {
  // printf("Hello world!\n");

  const buf = MemoryBuffer(132);
  // printf("Data: %d\n", buf.length);

  return 0;
}