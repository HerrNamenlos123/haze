declare "C" printf(str: stringview, ...);
declare "C" calloc(num: u64, size: u64): RawPtr<none>;
declare "C" free(ptr: RawPtr<none>);

malloc(size: u64): RawPtr<none> {
  return calloc(1, size);
}

struct Test {
  data: i32;
}

struct MemoryBuffer {
  data: RawPtr<none>;
  size: u64;

  constructor(size: u64) {
    const buffer = malloc(size);
    if !buffer {
      printf("Failed\n");
    }
    return MemoryBuffer {
      .data: buffer,
      .size: size,
    };
  }

  destructor() {
    free(this.data);
  }
}

struct List<T> {
  buffer: MemoryBuffer;
  length: u64;

  constructor() {
    return List<T> {
      .buffer: MemoryBuffer(0),
    };
  }

  push(n: T) {
    printf("Buffer: %d\n", this.buffer.data);
    const buf = this.buffer.data as RawPtr<T>;
    __c__("buf[this->length] = n");
    this.length = this.length + 1;
    printf("Length: %d\n", this.length);
    printf("Capacity: %d\n", this.capacity());
  }

  get(n: T): T {
    return n;
  }

  capacity(): u64 {
    const dummy = 0 as T;
    const size = this.buffer.size;
    __c__("size /= sizeof(dummy)");
    return size;
  }
}

fib(count: i32) {
  const fibs = List<i32>();
  fibs.push(0);
  fibs.push(1);

  const i = 2;
  while (i < count) {
    fibs.push(fibs.get(i - 1) + fibs.get(i - 2));
    printf("Found fib number: %d\n", fibs.get(fibs.length - 1));
  }
}

main(): i32 {
  fib(0);
  return 0;
}